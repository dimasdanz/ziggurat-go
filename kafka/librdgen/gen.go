package main

import (
	"os"
	"strings"
	"text/template"
)

var consumerKeys = map[string]string{
	"bootstrap.servers":        "string",
	"group.id":                 "string",
	"auto.offset.reset":        "string",
	"enable.auto.commit":       "bool",
	"auto.commit.interval.ms":  "int",
	"debug":                    "string",
	"go.logs.channel.enable":   "bool",
	"enable.auto.offset.store": "bool",
}

func main() {
	configTemplate, err := template.New("configTemplate").Parse(`// generated by go generate
// do not edit !

package kafka

import "github.com/confluentinc/confluent-kafka-go/kafka"

type ConsumerConfig struct { {{range .}}
	{{.GoName}} {{.Type}} {{end}}
	ConsumerCount int
	Topics string
	PollTimeout int
	RouteGroup string
}

func (c ConsumerConfig) toConfigMap() *kafka.ConfigMap {
    return &kafka.ConfigMap { {{range .}}
        "{{.LibRDName}}": c.{{.GoName}}, {{end}}
    }
}`)
	type Config struct {
		GoName    string
		Type      string
		LibRDName string
	}
	var data []Config

	for k, v := range consumerKeys {
		fieldName := strings.ReplaceAll(strings.Title(k), ".", "")
		data = append(data, Config{
			GoName:    fieldName,
			Type:      v,
			LibRDName: k,
		})
	}

	f, err := os.Create("librdconf.go")
	if err != nil {
		panic(err)
	}
	err = configTemplate.ExecuteTemplate(f, "configTemplate", data)
	if err != nil {
		panic(err)
	}
}
